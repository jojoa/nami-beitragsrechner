from sepaxml import SepaDD
import datetime
import uuid
import xml.etree.ElementTree as ET
import logging

logging.getLogger("xmlschema").setLevel(logging.WARNING)


class Sepa:
    def __init__(self, name, iban, bic, creditorId):
        self._config = {
            "name": name,
            "IBAN": ''.join(iban.split()),
            "BIC": bic,
            "batch": True,
            "creditor_id": creditorId,  # supplied by your bank or financial authority
            "currency": "EUR",  # ISO 4217
            # "instrument": "B2B"  # - default is CORE (B2C)
        }
        self._sepa = SepaDD(self._config, schema="pain.008.001.02", clean=True)

    def add_member(self, member, amountEur, mandat, collectionDate, verwendungszweck) -> bool:
        if mandat == None:
            payment = {
                "name": member.kontoverbindung.kontoinhaber,
                "IBAN": member.kontoverbindung.iban,
                "BIC": member.kontoverbindung.bic,
                "amount": int(amountEur*100),  # in cents
                "type": "RCUR",  # FRST,RCUR,OOFF,FNAL
                "collection_date": datetime.datetime.strptime(collectionDate, '%d.%m.%Y').date(),
                "mandate_id": "010101",
                "mandate_date": datetime.datetime.strptime("01.01.2000", '%d.%m.%Y').date(),
                "description": str(verwendungszweck),
                # "endtoend_id": str(uuid.uuid1())  # autogenerated if obmitted
            }
        else:
            payment = {
                "name": member.kontoverbindung.kontoinhaber,
                "IBAN": member.kontoverbindung.iban,
                "BIC": member.kontoverbindung.bic,
                "amount": int(amountEur*100),  # in cents
                "type": "RCUR",  # FRST,RCUR,OOFF,FNAL
                "collection_date": datetime.datetime.strptime(collectionDate, '%d.%m.%Y').date(),
                "mandate_id": str(mandat.mandatsreferenz),
                "mandate_date": datetime.datetime.strptime(mandat.mandatsdatum, '%d.%m.%Y').date(),
                "description": str(verwendungszweck),
                # "endtoend_id": str(uuid.uuid1())  # autogenerated if obmitted
            }

        try:
            self._sepa.add_payment(payment)
            return True
        except:
            return False

    def export(self, filePath) -> bool:
        try:
            with open(filePath, "w") as text_file:
                element = ET.fromstring(self._sepa.export(validate=True))
                ET.indent(element)
                text_file.write(str(ET.tostring(element, encoding='unicode')))
            return True
        except:
            return False

    def check_config(self) -> bool:
        return self._sepa.check_config(self._config)
